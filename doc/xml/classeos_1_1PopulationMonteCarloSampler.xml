<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classeos_1_1PopulationMonteCarloSampler" kind="class" prot="public">
    <compoundname>eos::PopulationMonteCarloSampler</compoundname>
    <basecompoundref refid="classeos_1_1PrivateImplementationPattern" prot="public" virt="non-virtual">eos::PrivateImplementationPattern&lt; PopulationMonteCarloSampler &gt;</basecompoundref>
    <includes refid="population__monte__carlo__sampler_8hh" local="no">population_monte_carlo_sampler.hh</includes>
    <innerclass refid="structeos_1_1PopulationMonteCarloSampler_1_1Config" prot="public">eos::PopulationMonteCarloSampler::Config</innerclass>
    <innerclass refid="structeos_1_1PopulationMonteCarloSampler_1_1Output" prot="public">eos::PopulationMonteCarloSampler::Output</innerclass>
    <innerclass refid="structeos_1_1PopulationMonteCarloSampler_1_1Status" prot="public">eos::PopulationMonteCarloSampler::Status</innerclass>
      <sectiondef kind="user-defined">
      <header>Basic Functions</header>
      <description><para><anchor id="_1amgrp2386c9a1f1785edee33f374dd2db9b3d"/> </para></description>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1af17458cf45dd30ed7328b88af1ad7ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::PopulationMonteCarloSampler::PopulationMonteCarloSampler</definition>
        <argsstring>(const Analysis &amp;analysis, const PopulationMonteCarloSampler::Config &amp;config)</argsstring>
        <name>PopulationMonteCarloSampler</name>
        <param>
          <type>const <ref refid="classeos_1_1Analysis" kindref="compound">Analysis</ref> &amp;</type>
          <declname>analysis</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1PopulationMonteCarloSampler_1_1Config" kindref="compound">PopulationMonteCarloSampler::Config</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analysis</parametername>
</parameternamelist>
<parameterdescription>
<para>The analysis for which we draw samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>config</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration of the samples. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="45"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a0a691ab9f41782d8c059685a3bc1998c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::PopulationMonteCarloSampler::PopulationMonteCarloSampler</definition>
        <argsstring>(const Analysis &amp;analysis, const hdf5::File &amp;file, const PopulationMonteCarloSampler::Config &amp;config, const bool &amp;update=false)</argsstring>
        <name>PopulationMonteCarloSampler</name>
        <param>
          <type>const <ref refid="classeos_1_1Analysis" kindref="compound">Analysis</ref> &amp;</type>
          <declname>analysis</declname>
        </param>
        <param>
          <type>const <ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1PopulationMonteCarloSampler_1_1Config" kindref="compound">PopulationMonteCarloSampler::Config</ref> &amp;</type>
          <declname>config</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>update</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize the PMC from a HDF5 file.</para><para>Several kinds of input files are (automatically) recognized:</para><para>a) GlobalLocal proposal function, stored in file. b) MCMC prerun, used for hierarchical clustering. c) Serialized status of a PMC proposal function from a previous PMC run.</para><para>All options regarding construction of the PMC in config are ignored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="59"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a10bebcfd46a9a9c8925de30e78f192ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::PopulationMonteCarloSampler::~PopulationMonteCarloSampler</definition>
        <argsstring>()</argsstring>
        <name>~PopulationMonteCarloSampler</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="62"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Sampling</header>
      <description><para><anchor id="_1amgrp1d07814d12178c958e4233501cb0bdc7"/> </para></description>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1acce93bba46d62aba651ccbf9dd7dd97e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::PopulationMonteCarloSampler::calculate_weights</definition>
        <argsstring>(const std::string &amp;sample_file, const unsigned &amp;min_index, const unsigned &amp;max_index) const </argsstring>
        <name>calculate_weights</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sample_file</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>min_index</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>max_index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calculate the posterior and importance weights for the range of parameter samples given by min and max indices from the sample file. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="73"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1ad5cdbdb944ffd933a76b58915c366ecc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1PopulationMonteCarloSampler_1_1Config" kindref="compound">PopulationMonteCarloSampler::Config</ref> &amp;</type>
        <definition>const PopulationMonteCarloSampler::Config&amp; eos::PopulationMonteCarloSampler::config</definition>
        <argsstring>() const </argsstring>
        <name>config</name>
        <briefdescription>
<para>Retrieve the configuration from which this sampler was constructed. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="76"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a89aafb7a0eea4a3d3f7c14c4678cb4fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::PopulationMonteCarloSampler::draw_samples</definition>
        <argsstring>()</argsstring>
        <name>draw_samples</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Draw parameter samples from the proposal density and store them, along with the full status of all <ref refid="namespaceeos_1_1components" kindref="compound">components</ref>.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>output_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the HDF5 output file </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="84"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a7df73b99d042f2b41a37e9acca29eebd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::PopulationMonteCarloSampler::run</definition>
        <argsstring>()</argsstring>
        <name>run</name>
        <briefdescription>
<para>Start the Markov chain sampling. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="100"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a0557e83dff8bc5befde6a43ede580f84" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1PopulationMonteCarloSampler_1_1Status" kindref="compound">PopulationMonteCarloSampler::Status</ref> &amp;</type>
        <definition>const PopulationMonteCarloSampler::Status&amp; eos::PopulationMonteCarloSampler::status</definition>
        <argsstring>() const </argsstring>
        <name>status</name>
        <briefdescription>
<para>Retrieve the current status. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="103"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a96d11e8d79528f5ea69f0c243dbf659f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eos::PopulationMonteCarloSampler::status</definition>
        <argsstring>(const PopulationMonteCarloSampler::Status &amp;new_status, bool check_convergence=false)</argsstring>
        <name>status</name>
        <param>
          <type>const <ref refid="structeos_1_1PopulationMonteCarloSampler_1_1Status" kindref="compound">PopulationMonteCarloSampler::Status</ref> &amp;</type>
          <declname>new_status</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>check_convergence</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the current status.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>new_status</parametername>
</parameternamelist>
<parameterdescription>
<para>The new status. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>check_convergence</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, compute convergence based on the new status and return true if converged. This option is for testing only! </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>True </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="112"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1PopulationMonteCarloSampler_1a69d7eee659c32197c19424aaf74a1eb8" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eos::PopulationMonteCarloSampler::read_samples</definition>
        <argsstring>(const std::string &amp;sample_file, const std::string &amp;base, const unsigned &amp;min, const unsigned &amp;max, std::vector&lt; std::vector&lt; double &gt;&gt; &amp;samples)</argsstring>
        <name>read_samples</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>sample_file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>base</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>min</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>max</declname>
        </param>
        <param>
          <type>std::vector&lt; std::vector&lt; double &gt;&gt; &amp;</type>
          <declname>samples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read in a slice of samples from a previous PMC dump.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>sample_file</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of HDF5 file containing the samples. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>base</parametername>
</parameternamelist>
<parameterdescription>
<para>Directory name within HDF5 file. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min</parametername>
</parameternamelist>
<parameterdescription>
<para>First element to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>max</parametername>
</parameternamelist>
<parameterdescription>
<para>Index of one-past last element to parse. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>samples</parametername>
</parameternamelist>
<parameterdescription>
<para>Upon return, contains all samples stored. When passing in, there must be at least one sample in there to convey the parameter dimension </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="97"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="841">
        <label>eos::PopulationMonteCarloSampler</label>
        <link refid="classeos_1_1PopulationMonteCarloSampler"/>
        <childnode refid="842" relation="public-inheritance">
        </childnode>
      </node>
      <node id="842">
        <label>eos::PrivateImplementationPattern&lt; PopulationMonteCarloSampler &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="843">
        <label>eos::PopulationMonteCarloSampler</label>
        <link refid="classeos_1_1PopulationMonteCarloSampler"/>
        <childnode refid="844" relation="public-inheritance">
        </childnode>
      </node>
      <node id="844">
        <label>eos::PrivateImplementationPattern&lt; PopulationMonteCarloSampler &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </collaborationgraph>
    <location file="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" line="31" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/population_monte_carlo_sampler.hh" bodystart="29" bodyend="115"/>
    <listofallmembers>
      <member refid="classeos_1_1PrivateImplementationPattern_1a232940e78b26c6ed4f97196f831c69c9" prot="protected" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>_imp</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1acce93bba46d62aba651ccbf9dd7dd97e" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>calculate_weights</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1ad5cdbdb944ffd933a76b58915c366ecc" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>config</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a89aafb7a0eea4a3d3f7c14c4678cb4fa" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>draw_samples</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1af17458cf45dd30ed7328b88af1ad7ffd" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>PopulationMonteCarloSampler</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a0a691ab9f41782d8c059685a3bc1998c" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>PopulationMonteCarloSampler</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1a3e3d5f4a565256a1dda6c234b051b2f2" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>PrivateImplementationPattern</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a69d7eee659c32197c19424aaf74a1eb8" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>read_samples</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a7df73b99d042f2b41a37e9acca29eebd" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>run</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a0557e83dff8bc5befde6a43ede580f84" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>status</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a96d11e8d79528f5ea69f0c243dbf659f" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>status</name></member>
      <member refid="classeos_1_1PopulationMonteCarloSampler_1a10bebcfd46a9a9c8925de30e78f192ef" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>~PopulationMonteCarloSampler</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1acf46ec2739c3b0ec9702b9428475876d" prot="public" virt="non-virtual"><scope>eos::PopulationMonteCarloSampler</scope><name>~PrivateImplementationPattern</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
