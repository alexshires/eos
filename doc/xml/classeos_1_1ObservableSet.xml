<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classeos_1_1ObservableSet" kind="class" prot="public">
    <compoundname>eos::ObservableSet</compoundname>
    <basecompoundref refid="classeos_1_1PrivateImplementationPattern" prot="public" virt="non-virtual">eos::PrivateImplementationPattern&lt; ObservableSet &gt;</basecompoundref>
    <includes refid="observable__set_8hh" local="no">observable_set.hh</includes>
      <sectiondef kind="user-defined">
      <header>Iteration and Access</header>
      <description><para><anchor id="_1amgrp518e849dad280496b3dba5bda3151948"/> </para></description>
      <memberdef kind="typedef" id="classeos_1_1ObservableSet_1ab19c0de83857e28065c2fe64b685a005" prot="public" static="no">
        <type><ref refid="classeos_1_1WrappedForwardIterator" kindref="compound">WrappedForwardIterator</ref>&lt; IteratorTag, <ref refid="namespaceeos_1a470e5dd806bd129080f1aa0c2954646f" kindref="member">ObservablePtr</ref> &gt;</type>
        <definition>typedef WrappedForwardIterator&lt;IteratorTag, ObservablePtr&gt; eos::ObservableSet::Iterator</definition>
        <argsstring></argsstring>
        <name>Iterator</name>
        <briefdescription>
<para>Iterator to the first observable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="50" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1a51791b1a8c6a1b8d3a90f8400d9e4140" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classeos_1_1WrappedForwardIterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator eos::ObservableSet::begin</definition>
        <argsstring>() const </argsstring>
        <name>begin</name>
        <briefdescription>
<para>Iterator to the first observable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="53"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1ab0fb90d7278f1d8c87f7755768ffd17c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classeos_1_1WrappedForwardIterator" kindref="compound">Iterator</ref></type>
        <definition>Iterator eos::ObservableSet::end</definition>
        <argsstring>() const </argsstring>
        <name>end</name>
        <briefdescription>
<para>Iterator pointing past the last observable. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="56"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1adb47f7f0d77ea9f922aa5c5259695136" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="namespaceeos_1a470e5dd806bd129080f1aa0c2954646f" kindref="member">ObservablePtr</ref> &amp;</type>
        <definition>ObservablePtr&amp; eos::ObservableSet::operator[]</definition>
        <argsstring>(const unsigned &amp;index) const </argsstring>
        <name>operator[]</name>
        <param>
          <type>const unsigned &amp;</type>
          <declname>index</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Random access to an observable.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>index</parametername>
</parameternamelist>
<parameterdescription>
<para>The position in the vector. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="63"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1aca5c09236edf4270851d09bf5c582ad6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::pair&lt; unsigned, bool &gt;</type>
        <definition>std::pair&lt;unsigned, bool&gt; eos::ObservableSet::add</definition>
        <argsstring>(const ObservablePtr &amp;observable)</argsstring>
        <name>add</name>
        <param>
          <type>const <ref refid="namespaceeos_1a470e5dd806bd129080f1aa0c2954646f" kindref="member">ObservablePtr</ref> &amp;</type>
          <declname>observable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add an observable to the vector.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>observable</parametername>
</parameternamelist>
<parameterdescription>
<para>The observable to be added.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>If observable is found to be an existing observable, the second value will be false. If the observable is added successfully, the second value is true, and the index of the new element in the vector is returned for use with operator[]. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="75"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1a910264f5f626496138f8bae63dcbfa82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classeos_1_1Parameters" kindref="compound">Parameters</ref></type>
        <definition>Parameters eos::ObservableSet::parameters</definition>
        <argsstring>()</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Access to the underlying <ref refid="classeos_1_1Parameters" kindref="compound">Parameters</ref> object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="78"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1ad14948c8f2421fc718f6ede0d9089cb0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned eos::ObservableSet::size</definition>
        <argsstring>() const </argsstring>
        <name>size</name>
        <briefdescription>
<para>The total number of elements. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="81"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Basic Functions</header>
      <description><para><anchor id="_1amgrp2386c9a1f1785edee33f374dd2db9b3d"/> Constructor. </para></description>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1a964ddde72c32ae5a5e7147fb8b171318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::ObservableSet::ObservableSet</definition>
        <argsstring>()</argsstring>
        <name>ObservableSet</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="41"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1ObservableSet_1a0321b23307b4b46974634dcd4d73b785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::ObservableSet::~ObservableSet</definition>
        <argsstring>()</argsstring>
        <name>~ObservableSet</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="44"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>A container class to hold only unique observables, i.e. they differ by at least one of the following: name, kinematics, or options. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="738">
        <label>eos::ObservableSet</label>
        <link refid="classeos_1_1ObservableSet"/>
        <childnode refid="739" relation="public-inheritance">
        </childnode>
      </node>
      <node id="739">
        <label>eos::PrivateImplementationPattern&lt; ObservableSet &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="740">
        <label>eos::ObservableSet</label>
        <link refid="classeos_1_1ObservableSet"/>
        <childnode refid="741" relation="public-inheritance">
        </childnode>
      </node>
      <node id="741">
        <label>eos::PrivateImplementationPattern&lt; ObservableSet &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </collaborationgraph>
    <location file="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" line="36" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/observable_set.hh" bodystart="34" bodyend="83"/>
    <listofallmembers>
      <member refid="classeos_1_1PrivateImplementationPattern_1a232940e78b26c6ed4f97196f831c69c9" prot="protected" virt="non-virtual"><scope>eos::ObservableSet</scope><name>_imp</name></member>
      <member refid="classeos_1_1ObservableSet_1aca5c09236edf4270851d09bf5c582ad6" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>add</name></member>
      <member refid="classeos_1_1ObservableSet_1a51791b1a8c6a1b8d3a90f8400d9e4140" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>begin</name></member>
      <member refid="classeos_1_1ObservableSet_1ab0fb90d7278f1d8c87f7755768ffd17c" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>end</name></member>
      <member refid="classeos_1_1ObservableSet_1ab19c0de83857e28065c2fe64b685a005" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>Iterator</name></member>
      <member refid="classeos_1_1ObservableSet_1a964ddde72c32ae5a5e7147fb8b171318" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>ObservableSet</name></member>
      <member refid="classeos_1_1ObservableSet_1adb47f7f0d77ea9f922aa5c5259695136" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>operator[]</name></member>
      <member refid="classeos_1_1ObservableSet_1a910264f5f626496138f8bae63dcbfa82" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>parameters</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1a3e3d5f4a565256a1dda6c234b051b2f2" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>PrivateImplementationPattern</name></member>
      <member refid="classeos_1_1ObservableSet_1ad14948c8f2421fc718f6ede0d9089cb0" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>size</name></member>
      <member refid="classeos_1_1ObservableSet_1a0321b23307b4b46974634dcd4d73b785" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>~ObservableSet</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1acf46ec2739c3b0ec9702b9428475876d" prot="public" virt="non-virtual"><scope>eos::ObservableSet</scope><name>~PrivateImplementationPattern</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
