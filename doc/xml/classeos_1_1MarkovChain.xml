<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classeos_1_1MarkovChain" kind="class" prot="public">
    <compoundname>eos::MarkovChain</compoundname>
    <basecompoundref refid="classeos_1_1PrivateImplementationPattern" prot="public" virt="non-virtual">eos::PrivateImplementationPattern&lt; MarkovChain &gt;</basecompoundref>
    <includes refid="markov__chain_8hh" local="no">markov_chain.hh</includes>
    <innerclass refid="structeos_1_1MarkovChain_1_1History" prot="public">eos::MarkovChain::History</innerclass>
    <innerclass refid="structeos_1_1MarkovChain_1_1HyperParameter" prot="public">eos::MarkovChain::HyperParameter</innerclass>
    <innerclass refid="structeos_1_1MarkovChain_1_1ProposalFunction" prot="public">eos::MarkovChain::ProposalFunction</innerclass>
    <innerclass refid="structeos_1_1MarkovChain_1_1State" prot="public">eos::MarkovChain::State</innerclass>
    <innerclass refid="structeos_1_1MarkovChain_1_1Stats" prot="public">eos::MarkovChain::Stats</innerclass>
      <sectiondef kind="user-defined">
      <header>Basic Functions</header>
      <description><para><anchor id="_1amgrp2386c9a1f1785edee33f374dd2db9b3d"/> </para></description>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a47726a7176a818738c426b532e88ba94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::MarkovChain::MarkovChain</definition>
        <argsstring>(const Analysis &amp;analysis, unsigned long seed, const std::shared_ptr&lt; MarkovChain::ProposalFunction &gt; &amp;proposal_function)</argsstring>
        <name>MarkovChain</name>
        <param>
          <type>const <ref refid="classeos_1_1Analysis" kindref="compound">Analysis</ref> &amp;</type>
          <declname>analysis</declname>
        </param>
        <param>
          <type>unsigned long</type>
          <declname>seed</declname>
        </param>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structeos_1_1MarkovChain_1_1ProposalFunction" kindref="compound">MarkovChain::ProposalFunction</ref> &gt; &amp;</type>
          <declname>proposal_function</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Constructor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>analysis</parametername>
</parameternamelist>
<parameterdescription>
<para>The analysis for which we run. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>seed</parametername>
</parameternamelist>
<parameterdescription>
<para>The initial seed for the RNG. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="52"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1afc27e695a24e780cd1af87e454588f31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::MarkovChain::~MarkovChain</definition>
        <argsstring>()</argsstring>
        <name>~MarkovChain</name>
        <briefdescription>
<para>Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="55"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeos_1_1MarkovChain_1af4eb1b21be84a13ae5f421fe49ed9373" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Remove existing history of this chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="59"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a4ba66e0d64dade9f392d2542a7c566f4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">State</ref> &amp;</type>
        <definition>const State&amp; eos::MarkovChain::current_state</definition>
        <argsstring>() const </argsstring>
        <name>current_state</name>
        <briefdescription>
<para>Retrieve information regarding the current state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="62"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1af528eb210dd7052ceeb9455cb588cdd4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::dump_description</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_set) const </argsstring>
        <name>dump_description</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_set</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="65"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1aa7fc24a3066077ab60de68a5a3f8ebe5" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::dump_history</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_set_name, const unsigned &amp;last_iterations) const </argsstring>
        <name>dump_history</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_set_name</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>last_iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Dump a part of the most recent history in the HDF5 file under the given group name.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_set_name</parametername>
</parameternamelist>
<parameterdescription>
<para>All output is stored below this directory. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>last_iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>Dump only this many iterations. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="75"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a89a777f8c14787db1e803995ee77d862" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::dump_proposal</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_set_name) const </argsstring>
        <name>dump_proposal</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_set_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="77"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1aa3055684326d68700ebeb994b878d8db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structeos_1_1MarkovChain_1_1HyperParameter" kindref="compound">MarkovChain::HyperParameter</ref> &amp;</type>
        <definition>MarkovChain::HyperParameter&amp; eos::MarkovChain::hyper_parameter</definition>
        <argsstring>(bool current=true) const </argsstring>
        <name>hyper_parameter</name>
        <param>
          <type>bool</type>
          <declname>current</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="79"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a3a9c62e634a375bffbb3fba0b7794b69" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const unsigned &amp;</type>
        <definition>const unsigned&amp; eos::MarkovChain::iterations_last_run</definition>
        <argsstring>() const </argsstring>
        <name>iterations_last_run</name>
        <briefdescription>
<para>Retrieve the number of iterations used in the last run. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="82"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1ae1ef51057e7a205fbc9d04a5e913fb06" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1MarkovChain_1_1History" kindref="compound">History</ref> &amp;</type>
        <definition>const History&amp; eos::MarkovChain::history</definition>
        <argsstring>() const </argsstring>
        <name>history</name>
        <briefdescription>
<para>Retrieve the chain&apos;s detailed history. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="85"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a808902afe1f1c7def764c4c492e29f1d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::set_analysis</definition>
        <argsstring>(const Analysis &amp;analysis)</argsstring>
        <name>set_analysis</name>
        <param>
          <type>const <ref refid="classeos_1_1Analysis" kindref="compound">Analysis</ref> &amp;</type>
          <declname>analysis</declname>
        </param>
        <briefdescription>
<para>Set analysis. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="88"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a8aa1b0fac7040d32e42a8b2a8a508743" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::keep_history</definition>
        <argsstring>(bool keep_samples, bool keep_observables_and_proposals=false)</argsstring>
        <name>keep_history</name>
        <param>
          <type>bool</type>
          <declname>keep_samples</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>keep_observables_and_proposals</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set whether the chain stores samples in runs to come.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>keep_samples</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, the history of the runs to come will be kept. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>keep_observables_and_proposals</parametername>
</parameternamelist>
<parameterdescription>
<para>For debugging purposes, store the proposed points and the observable values. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="97"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a0424b9803e0a479c88f76713455662fa" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::normalized_density</definition>
        <argsstring>(std::tuple&lt; double, double &gt; &amp;result, const std::vector&lt; double &gt; &amp;point, const unsigned &amp;posterior_evaluations) const </argsstring>
        <name>normalized_density</name>
        <param>
          <type>std::tuple&lt; double, double &gt; &amp;</type>
          <declname>result</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const unsigned &amp;</type>
          <declname>posterior_evaluations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute estimate of normalized posterior density of this chain according to method described in Chib, Jeliazkov (2001), Eq. (9) <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>&lt;numerator</parametername>
<parametername>denominator&gt;</parametername>
</parameternamelist>
<parameterdescription>
<para>of [CJ2001], Eq. (9) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>where density is sought </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>posterior_evaluations</parametername>
</parameternamelist>
<parameterdescription>
<para>the number of additional posterior evaluations needed to estimate the normalized posterior density, see denominator of [CJ2001], Eq. (9) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="108"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1affcf4c3c4284fd0fae634c5cf1a97fa2" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::vector&lt; <ref refid="structeos_1_1ParameterDescription" kindref="compound">ParameterDescription</ref> &gt; &amp;</type>
        <definition>const std::vector&lt;ParameterDescription&gt;&amp; eos::MarkovChain::parameter_descriptions</definition>
        <argsstring>() const </argsstring>
        <name>parameter_descriptions</name>
        <briefdescription>
<para>Retrieve the descriptions of all parameters that are explored by this chain. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="111"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a42c06afd1034be43e44bcbb24a15c808" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool eos::MarkovChain::proposal_accepted</definition>
        <argsstring>() const </argsstring>
        <name>proposal_accepted</name>
        <briefdescription>
<para>Check whether the most recently proposed move was accepted. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="114"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1acfde2f6063a9ad8f6a4dabb548997b4d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; <ref refid="structeos_1_1MarkovChain_1_1ProposalFunction" kindref="compound">MarkovChain::ProposalFunction</ref> &gt;</type>
        <definition>std::shared_ptr&lt;MarkovChain::ProposalFunction&gt; eos::MarkovChain::proposal_function</definition>
        <argsstring>() const </argsstring>
        <name>proposal_function</name>
        <briefdescription>
<para>Access to the proposal function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="117"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a7fcacec6a56edd50b12efb67dcea432f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::proposal_function</definition>
        <argsstring>(const std::shared_ptr&lt; MarkovChain::ProposalFunction &gt; &amp;)</argsstring>
        <name>proposal_function</name>
        <param>
          <type>const std::shared_ptr&lt; <ref refid="structeos_1_1MarkovChain_1_1ProposalFunction" kindref="compound">MarkovChain::ProposalFunction</ref> &gt; &amp;</type>
        </param>
        <briefdescription>
<para>Set the proposal function. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="120"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a094a7852f4983a3c26e6a062b66f2547" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">State</ref> &amp;</type>
        <definition>const State&amp; eos::MarkovChain::proposed_state</definition>
        <argsstring>() const </argsstring>
        <name>proposed_state</name>
        <briefdescription>
<para>Retrieve information regarding the most recently proposed state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="123"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a4e54cc6e32c7bb258804b76988ab7f0b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::reset</definition>
        <argsstring>(bool hard=false)</argsstring>
        <name>reset</name>
        <param>
          <type>bool</type>
          <declname>hard</declname>
          <defval>false</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Clear all statistics and counter.</para><para>Do not change current position nor scale. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>hard</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, rease all statistics (use to clear prerun data before main run) </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="131"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1abc73ca1b9fc5bdafba43c799e75192c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::run</definition>
        <argsstring>(const unsigned &amp;iterations)</argsstring>
        <name>run</name>
        <param>
          <type>const unsigned &amp;</type>
          <declname>iterations</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Perform a number of iterations.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>iterations</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of iterations that shall be performed. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="170"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a24a9d7e2f6f930594dd7140acd6180bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::set_mode</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_base_name, const std::vector&lt; double &gt; &amp;point, const double &amp;posterior)</argsstring>
        <name>set_mode</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_base_name</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>posterior</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the stats at mode to a point found outside of the chain. Triggers writing to the HDF5 file as another row in the stats section.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>posterior</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="179"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a84d4342221f7f6a826d0a9a2480165c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void eos::MarkovChain::set_point</definition>
        <argsstring>(const std::vector&lt; double &gt; &amp;point, const MarkovChain::HyperParameter &amp;hyper_parameter)</argsstring>
        <name>set_point</name>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>point</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1HyperParameter" kindref="compound">MarkovChain::HyperParameter</ref> &amp;</type>
          <declname>hyper_parameter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Set the chain to continue its walk from the given point.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>point</parametername>
</parameternamelist>
<parameterdescription>
<para>The point in parameter space. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="186"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1af48c29cabc958e061f699e595ffa3294" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const <ref refid="structeos_1_1MarkovChain_1_1Stats" kindref="compound">Stats</ref> &amp;</type>
        <definition>const Stats&amp; eos::MarkovChain::statistics</definition>
        <argsstring>() const </argsstring>
        <name>statistics</name>
        <briefdescription>
<para>Retrieve statistical data that summarizes the evolution of the chain up to the current point. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="189"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classeos_1_1MarkovChain_1a9d67db1a7839b07dc43a847b6383e619" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eos::MarkovChain::read_data</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_base_name, MarkovChain::History &amp;history, std::shared_ptr&lt; MarkovChain::ProposalFunction &gt; &amp;proposal, std::string &amp;proposal_type, MarkovChain::Stats &amp;stats)</argsstring>
        <name>read_data</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_base_name</declname>
        </param>
        <param>
          <type><ref refid="structeos_1_1MarkovChain_1_1History" kindref="compound">MarkovChain::History</ref> &amp;</type>
          <declname>history</declname>
        </param>
        <param>
          <type>std::shared_ptr&lt; <ref refid="structeos_1_1MarkovChain_1_1ProposalFunction" kindref="compound">MarkovChain::ProposalFunction</ref> &gt; &amp;</type>
          <declname>proposal</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>proposal_type</declname>
        </param>
        <param>
          <type><ref refid="structeos_1_1MarkovChain_1_1Stats" kindref="compound">MarkovChain::Stats</ref> &amp;</type>
          <declname>stats</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read part of the output of a chain&apos;s prerun from <ref refid="namespaceeos_1_1hdf5" kindref="compound">hdf5</ref> file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_base_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory in the file under which the data is parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para>The parsed chain&apos;s history is returned by reference, assumed to be empty initially. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proposal</parametername>
</parameternamelist>
<parameterdescription>
<para>The local proposal density is recreated and returned by reference. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>proposal_type</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the local proposal function used. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stats</parametername>
</parameternamelist>
<parameterdescription>
<para>Only the mode of the posterior is restored and returned by reference. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="147"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1MarkovChain_1acbcd604ef986e97891f0e358e045c117" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void eos::MarkovChain::read_descriptions</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_base_name, std::vector&lt; ParameterDescription &gt; &amp;descriptions, std::vector&lt; std::string &gt; &amp;priors, std::vector&lt; std::string &gt; &amp;constraints, std::string &amp;hash)</argsstring>
        <name>read_descriptions</name>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_base_name</declname>
        </param>
        <param>
          <type>std::vector&lt; <ref refid="structeos_1_1ParameterDescription" kindref="compound">ParameterDescription</ref> &gt; &amp;</type>
          <declname>descriptions</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>priors</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; &amp;</type>
          <declname>constraints</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>hash</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Read the description part of chain&apos;s prerun from <ref refid="namespaceeos_1_1hdf5" kindref="compound">hdf5</ref> file.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>data_base_name</parametername>
</parameternamelist>
<parameterdescription>
<para>The directory in the file under which the data is parsed. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>descriptions</parametername>
</parameternamelist>
<parameterdescription>
<para>All parameter ranges etc. Beware, the association to the underlying <ref refid="classeos_1_1Parameters" kindref="compound">Parameters</ref> object is independent. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>priors</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of a prior distribution. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>constraints</parametername>
</parameternamelist>
<parameterdescription>
<para>The string representation of an individual constraint. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>hash</parametername>
</parameternamelist>
<parameterdescription>
<para>The EOS version used to create the file. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="163"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="609">
        <label>eos::MarkovChain</label>
        <link refid="classeos_1_1MarkovChain"/>
        <childnode refid="610" relation="public-inheritance">
        </childnode>
      </node>
      <node id="610">
        <label>eos::PrivateImplementationPattern&lt; MarkovChain &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="611">
        <label>eos::MarkovChain</label>
        <link refid="classeos_1_1MarkovChain"/>
        <childnode refid="612" relation="public-inheritance">
        </childnode>
      </node>
      <node id="612">
        <label>eos::PrivateImplementationPattern&lt; MarkovChain &gt;</label>
        <link refid="classeos_1_1PrivateImplementationPattern"/>
      </node>
    </collaborationgraph>
    <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="36" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" bodystart="34" bodyend="190"/>
    <listofallmembers>
      <member refid="classeos_1_1PrivateImplementationPattern_1a232940e78b26c6ed4f97196f831c69c9" prot="protected" virt="non-virtual"><scope>eos::MarkovChain</scope><name>_imp</name></member>
      <member refid="classeos_1_1MarkovChain_1af4eb1b21be84a13ae5f421fe49ed9373" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>clear</name></member>
      <member refid="classeos_1_1MarkovChain_1a4ba66e0d64dade9f392d2542a7c566f4" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>current_state</name></member>
      <member refid="classeos_1_1MarkovChain_1af528eb210dd7052ceeb9455cb588cdd4" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>dump_description</name></member>
      <member refid="classeos_1_1MarkovChain_1aa7fc24a3066077ab60de68a5a3f8ebe5" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>dump_history</name></member>
      <member refid="classeos_1_1MarkovChain_1a89a777f8c14787db1e803995ee77d862" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>dump_proposal</name></member>
      <member refid="classeos_1_1MarkovChain_1ae1ef51057e7a205fbc9d04a5e913fb06" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>history</name></member>
      <member refid="classeos_1_1MarkovChain_1aa3055684326d68700ebeb994b878d8db" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>hyper_parameter</name></member>
      <member refid="classeos_1_1MarkovChain_1a3a9c62e634a375bffbb3fba0b7794b69" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>iterations_last_run</name></member>
      <member refid="classeos_1_1MarkovChain_1a8aa1b0fac7040d32e42a8b2a8a508743" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>keep_history</name></member>
      <member refid="classeos_1_1MarkovChain_1a47726a7176a818738c426b532e88ba94" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>MarkovChain</name></member>
      <member refid="classeos_1_1MarkovChain_1a0424b9803e0a479c88f76713455662fa" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>normalized_density</name></member>
      <member refid="classeos_1_1MarkovChain_1affcf4c3c4284fd0fae634c5cf1a97fa2" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>parameter_descriptions</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1a3e3d5f4a565256a1dda6c234b051b2f2" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>PrivateImplementationPattern</name></member>
      <member refid="classeos_1_1MarkovChain_1a42c06afd1034be43e44bcbb24a15c808" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>proposal_accepted</name></member>
      <member refid="classeos_1_1MarkovChain_1acfde2f6063a9ad8f6a4dabb548997b4d" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>proposal_function</name></member>
      <member refid="classeos_1_1MarkovChain_1a7fcacec6a56edd50b12efb67dcea432f" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>proposal_function</name></member>
      <member refid="classeos_1_1MarkovChain_1a094a7852f4983a3c26e6a062b66f2547" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>proposed_state</name></member>
      <member refid="classeos_1_1MarkovChain_1a9d67db1a7839b07dc43a847b6383e619" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>read_data</name></member>
      <member refid="classeos_1_1MarkovChain_1acbcd604ef986e97891f0e358e045c117" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>read_descriptions</name></member>
      <member refid="classeos_1_1MarkovChain_1a4e54cc6e32c7bb258804b76988ab7f0b" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>reset</name></member>
      <member refid="classeos_1_1MarkovChain_1abc73ca1b9fc5bdafba43c799e75192c8" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>run</name></member>
      <member refid="classeos_1_1MarkovChain_1a808902afe1f1c7def764c4c492e29f1d" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>set_analysis</name></member>
      <member refid="classeos_1_1MarkovChain_1a24a9d7e2f6f930594dd7140acd6180bb" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>set_mode</name></member>
      <member refid="classeos_1_1MarkovChain_1a84d4342221f7f6a826d0a9a2480165c4" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>set_point</name></member>
      <member refid="classeos_1_1MarkovChain_1af48c29cabc958e061f699e595ffa3294" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>statistics</name></member>
      <member refid="classeos_1_1MarkovChain_1afc27e695a24e780cd1af87e454588f31" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>~MarkovChain</name></member>
      <member refid="classeos_1_1PrivateImplementationPattern_1acf46ec2739c3b0ec9702b9428475876d" prot="public" virt="non-virtual"><scope>eos::MarkovChain</scope><name>~PrivateImplementationPattern</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
