<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="structeos_1_1MarkovChain_1_1ProposalFunction" kind="struct" prot="public">
    <compoundname>eos::MarkovChain::ProposalFunction</compoundname>
    <derivedcompoundref refid="classeos_1_1proposal__functions_1_1BlockDecomposition" prot="public" virt="non-virtual">eos::proposal_functions::BlockDecomposition</derivedcompoundref>
    <derivedcompoundref refid="classeos_1_1proposal__functions_1_1GlobalLocal" prot="public" virt="non-virtual">eos::proposal_functions::GlobalLocal</derivedcompoundref>
    <derivedcompoundref refid="classeos_1_1proposal__functions_1_1Multivariate" prot="public" virt="non-virtual">eos::proposal_functions::Multivariate</derivedcompoundref>
    <includes refid="markov__chain_8hh" local="no">markov_chain.hh</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1a758ad6e18e36b15062fe776ee7a9b3d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type></type>
        <definition>virtual eos::MarkovChain::ProposalFunction::~ProposalFunction</definition>
        <argsstring>()=0</argsstring>
        <name>~ProposalFunction</name>
        <briefdescription>
<para>(virtual) Destructor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="337"/>
      </memberdef>
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1afee6a937c53b9cfb257a5cd724a54296" prot="public" static="no" const="no" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void eos::MarkovChain::ProposalFunction::adapt</definition>
        <argsstring>(const MarkovChain::State::Iterator &amp;begin, const MarkovChain::State::Iterator &amp;end, const double &amp;efficiency, const double &amp;efficiency_min, const double &amp;efficiency_max)=0</argsstring>
        <name>adapt</name>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1BlockDecomposition_1a045b459bc8314548abe3e5766134e625">adapt</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1Multivariate_1a03a15f539c8b7eeefb7e323d8c3cd15d">adapt</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1GlobalLocal_1aecea521f102e4f3c2fd0fad24b21b730">adapt</reimplementedby>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State_1ad7590843e4feca7e696c53863e6e10c1" kindref="member">MarkovChain::State::Iterator</ref> &amp;</type>
          <declname>begin</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State_1ad7590843e4feca7e696c53863e6e10c1" kindref="member">MarkovChain::State::Iterator</ref> &amp;</type>
          <declname>end</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>efficiency</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>efficiency_min</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>efficiency_max</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Adapt the proposal function to the chain&apos;s current state and history. <simplesect kind="note"><para><ref refid="structeos_1_1MarkovChain_1_1ProposalFunction_1afee6a937c53b9cfb257a5cd724a54296" kindref="member">adapt()</ref> always uses the full history passed as an argument. If only a subset of an existing history is to be used, the caller is responsible for removing the unneeded parts from history before calling <ref refid="structeos_1_1MarkovChain_1_1ProposalFunction_1afee6a937c53b9cfb257a5cd724a54296" kindref="member">adapt()</ref>. </para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>history</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="347"/>
      </memberdef>
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1a7065079985f8bb44309d7773d85d225b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type><ref refid="namespaceeos_1ae97f9891c67c90959a03fc96efaa4dc9" kindref="member">ProposalFunctionPtr</ref></type>
        <definition>virtual ProposalFunctionPtr eos::MarkovChain::ProposalFunction::clone</definition>
        <argsstring>() const =0</argsstring>
        <name>clone</name>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1BlockDecomposition_1ac863a3b2df66507f62c8decc7f543653">clone</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateStudentT_1a4f5007a73e656d9ff0476a4b5740018b">clone</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1abc989d0f246afe160eb1d4a0f1b4a03e">clone</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1GlobalLocal_1ae0ee0bd2127085ceacb1a89f5527515b">clone</reimplementedby>
        <briefdescription>
<para>Create independent copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="350"/>
      </memberdef>
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1aea88a1340e10cc6a5b03d8b5483774f7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void eos::MarkovChain::ProposalFunction::dump_state</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_set_base_name) const =0</argsstring>
        <name>dump_state</name>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1BlockDecomposition_1a6e35abd9d5995d4ce8cd931df9037034">dump_state</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateStudentT_1ab6afe975a0e1a553b785be0fd4daec05">dump_state</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a5ab69304a64a9a947c847b8bc842417f">dump_state</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1GlobalLocal_1a07d947ae2de101cc4ef13577d5d81ad5">dump_state</reimplementedby>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_set_base_name</declname>
        </param>
        <briefdescription>
<para>Store state in the file under the given base name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="353"/>
      </memberdef>
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1ae3f2c43980ec9dfe9f35d8139f2f4ec7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>double</type>
        <definition>virtual double eos::MarkovChain::ProposalFunction::evaluate</definition>
        <argsstring>(const MarkovChain::State &amp;x, const MarkovChain::State &amp;y) const =0</argsstring>
        <name>evaluate</name>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1BlockDecomposition_1a2ccb90e87ccd98a155af6ecd71e03cf5">evaluate</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateStudentT_1a9ca45b3dad5b0e6612ba27f7fb4e1973">evaluate</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a691b0b536abdd28e3cc629c27046603d">evaluate</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1GlobalLocal_1ad1f7d7686225e665edd47cbd230483f6">evaluate</reimplementedby>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Evaluate the density to propose x given y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="356"/>
      </memberdef>
      <memberdef kind="function" id="structeos_1_1MarkovChain_1_1ProposalFunction_1a2b296008d32b1cd008e59cde1228705f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void eos::MarkovChain::ProposalFunction::propose</definition>
        <argsstring>(MarkovChain::State &amp;x, const MarkovChain::State &amp;y, gsl_rng *rng) const =0</argsstring>
        <name>propose</name>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1BlockDecomposition_1a5b0a6e997f1c78d2557f2a742c4d3813">propose</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateStudentT_1ad7c59db9bc93f0fb4b3204b8f272ba6c">propose</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a4f451b8dc78b681eee4bda462217fb77">propose</reimplementedby>
        <reimplementedby refid="classeos_1_1proposal__functions_1_1GlobalLocal_1a600d45aa7174be9fb264a938de61a568">propose</reimplementedby>
        <param>
          <type><ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>gsl_rng *</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Obtain from the density a proposal x given y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="359"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Interface to proposal functions for a <ref refid="classeos_1_1MarkovChain" kindref="compound">MarkovChain</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="854">
        <label>eos::MarkovChain::ProposalFunction</label>
        <link refid="structeos_1_1MarkovChain_1_1ProposalFunction"/>
      </node>
      <node id="859">
        <label>eos::proposal_functions::MultivariateStudentT</label>
        <link refid="classeos_1_1proposal__functions_1_1MultivariateStudentT"/>
        <childnode refid="857" relation="public-inheritance">
        </childnode>
      </node>
      <node id="857">
        <label>eos::proposal_functions::Multivariate</label>
        <link refid="classeos_1_1proposal__functions_1_1Multivariate"/>
        <childnode refid="854" relation="public-inheritance">
        </childnode>
      </node>
      <node id="858">
        <label>eos::proposal_functions::MultivariateGaussian</label>
        <link refid="classeos_1_1proposal__functions_1_1MultivariateGaussian"/>
        <childnode refid="857" relation="public-inheritance">
        </childnode>
      </node>
      <node id="856">
        <label>eos::proposal_functions::GlobalLocal</label>
        <link refid="classeos_1_1proposal__functions_1_1GlobalLocal"/>
        <childnode refid="854" relation="public-inheritance">
        </childnode>
      </node>
      <node id="855">
        <label>eos::proposal_functions::BlockDecomposition</label>
        <link refid="classeos_1_1proposal__functions_1_1BlockDecomposition"/>
        <childnode refid="854" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" line="335" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/markov_chain.hh" bodystart="334" bodyend="360"/>
    <listofallmembers>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1afee6a937c53b9cfb257a5cd724a54296" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>adapt</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a7065079985f8bb44309d7773d85d225b" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>clone</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1aea88a1340e10cc6a5b03d8b5483774f7" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>dump_state</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1ae3f2c43980ec9dfe9f35d8139f2f4ec7" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>evaluate</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a2b296008d32b1cd008e59cde1228705f" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>propose</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a758ad6e18e36b15062fe776ee7a9b3d9" prot="public" virt="pure-virtual"><scope>eos::MarkovChain::ProposalFunction</scope><name>~ProposalFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
