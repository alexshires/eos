<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.6.1">
  <compounddef id="classeos_1_1proposal__functions_1_1MultivariateGaussian" kind="class" prot="public">
    <compoundname>eos::proposal_functions::MultivariateGaussian</compoundname>
    <basecompoundref refid="classeos_1_1proposal__functions_1_1Multivariate" prot="public" virt="non-virtual">eos::proposal_functions::Multivariate</basecompoundref>
    <includes refid="proposal__functions_8hh" local="no">proposal_functions.hh</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a434c13230be16d8d1f658f277a5b6c28" prot="public" static="no">
        <type><ref refid="classeos_1_1hdf5_1_1Composite" kindref="compound">hdf5::Composite</ref>&lt; <ref refid="classeos_1_1hdf5_1_1Scalar" kindref="compound">hdf5::Scalar</ref>&lt; double &gt;, <ref refid="classeos_1_1hdf5_1_1Scalar" kindref="compound">hdf5::Scalar</ref>&lt; double &gt;, <ref refid="classeos_1_1hdf5_1_1Scalar" kindref="compound">hdf5::Scalar</ref>&lt; unsigned &gt; &gt;</type>
        <definition>typedef hdf5::Composite&lt;hdf5::Scalar&lt;double&gt;, hdf5::Scalar&lt;double&gt;, hdf5::Scalar&lt;unsigned&gt; &gt; eos::proposal_functions::MultivariateGaussian::ScalarsType</definition>
        <argsstring></argsstring>
        <name>ScalarsType</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="505" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" bodystart="505" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-func">
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1aca175ee100311315c4ddb34757b68a3e" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classeos_1_1hdf5_1_1Composite" kindref="compound">ScalarsType</ref></type>
        <definition>static ScalarsType eos::proposal_functions::MultivariateGaussian::scalars_type</definition>
        <argsstring>()</argsstring>
        <name>scalars_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="506"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1ac797f04a7bce3b029cfc32af0d6ecd07" prot="protected" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void eos::proposal_functions::MultivariateGaussian::_compute_norm</definition>
        <argsstring>()</argsstring>
        <name>_compute_norm</name>
        <reimplements refid="classeos_1_1proposal__functions_1_1Multivariate_1a284a17764a486687d3d1f2aee1a3bf3c">_compute_norm</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="509"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a9052192755db179db5e204c2bb0ad3f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>eos::proposal_functions::MultivariateGaussian::MultivariateGaussian</definition>
        <argsstring>(const unsigned &amp;dimension, const std::vector&lt; double &gt; &amp;covariance, const bool &amp;automatic_scaling=true)</argsstring>
        <name>MultivariateGaussian</name>
        <param>
          <type>const unsigned &amp;</type>
          <declname>dimension</declname>
        </param>
        <param>
          <type>const std::vector&lt; double &gt; &amp;</type>
          <declname>covariance</declname>
        </param>
        <param>
          <type>const bool &amp;</type>
          <declname>automatic_scaling</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="512"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a18dde9d78f6ec8a459443396648ee990" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual eos::proposal_functions::MultivariateGaussian::~MultivariateGaussian</definition>
        <argsstring>()</argsstring>
        <name>~MultivariateGaussian</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="514"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1abc989d0f246afe160eb1d4a0f1b4a03e" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type><ref refid="namespaceeos_1ae97f9891c67c90959a03fc96efaa4dc9" kindref="member">ProposalFunctionPtr</ref></type>
        <definition>virtual ProposalFunctionPtr eos::proposal_functions::MultivariateGaussian::clone</definition>
        <argsstring>() const </argsstring>
        <name>clone</name>
        <reimplements refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a7065079985f8bb44309d7773d85d225b">clone</reimplements>
        <briefdescription>
<para>Create independent copy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="516"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a5ab69304a64a9a947c847b8bc842417f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void eos::proposal_functions::MultivariateGaussian::dump_state</definition>
        <argsstring>(hdf5::File &amp;file, const std::string &amp;data_set_base_name) const </argsstring>
        <name>dump_state</name>
        <reimplements refid="structeos_1_1MarkovChain_1_1ProposalFunction_1aea88a1340e10cc6a5b03d8b5483774f7">dump_state</reimplements>
        <param>
          <type><ref refid="classeos_1_1hdf5_1_1File" kindref="compound">hdf5::File</ref> &amp;</type>
          <declname>file</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>data_set_base_name</declname>
        </param>
        <briefdescription>
<para>Store state in the file under the given base name. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="518"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a691b0b536abdd28e3cc629c27046603d" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>double</type>
        <definition>virtual double eos::proposal_functions::MultivariateGaussian::evaluate</definition>
        <argsstring>(const MarkovChain::State &amp;x, const MarkovChain::State &amp;y) const </argsstring>
        <name>evaluate</name>
        <reimplements refid="structeos_1_1MarkovChain_1_1ProposalFunction_1ae3f2c43980ec9dfe9f35d8139f2f4ec7">evaluate</reimplements>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
<para>Evaluate the density to propose x given y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="520"/>
      </memberdef>
      <memberdef kind="function" id="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a4f451b8dc78b681eee4bda462217fb77" prot="public" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void eos::proposal_functions::MultivariateGaussian::propose</definition>
        <argsstring>(MarkovChain::State &amp;x, const MarkovChain::State &amp;y, gsl_rng *rng) const </argsstring>
        <name>propose</name>
        <reimplements refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a2b296008d32b1cd008e59cde1228705f">propose</reimplements>
        <param>
          <type><ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>const <ref refid="structeos_1_1MarkovChain_1_1State" kindref="compound">MarkovChain::State</ref> &amp;</type>
          <declname>y</declname>
        </param>
        <param>
          <type>gsl_rng *</type>
          <declname>rng</declname>
        </param>
        <briefdescription>
<para>Obtain from the density a proposal x given y. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="522"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="674">
        <label>eos::MarkovChain::ProposalFunction</label>
        <link refid="structeos_1_1MarkovChain_1_1ProposalFunction"/>
      </node>
      <node id="673">
        <label>eos::proposal_functions::Multivariate</label>
        <link refid="classeos_1_1proposal__functions_1_1Multivariate"/>
        <childnode refid="674" relation="public-inheritance">
        </childnode>
      </node>
      <node id="672">
        <label>eos::proposal_functions::MultivariateGaussian</label>
        <link refid="classeos_1_1proposal__functions_1_1MultivariateGaussian"/>
        <childnode refid="673" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="677">
        <label>eos::MarkovChain::ProposalFunction</label>
        <link refid="structeos_1_1MarkovChain_1_1ProposalFunction"/>
      </node>
      <node id="676">
        <label>eos::proposal_functions::Multivariate</label>
        <link refid="classeos_1_1proposal__functions_1_1Multivariate"/>
        <childnode refid="677" relation="public-inheritance">
        </childnode>
        <childnode refid="678" relation="usage">
          <edgelabel>_index_list</edgelabel>
        </childnode>
      </node>
      <node id="675">
        <label>eos::proposal_functions::MultivariateGaussian</label>
        <link refid="classeos_1_1proposal__functions_1_1MultivariateGaussian"/>
        <childnode refid="676" relation="public-inheritance">
        </childnode>
      </node>
      <node id="678">
        <label>std::vector&lt; unsigned &gt;</label>
      </node>
    </collaborationgraph>
    <location file="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" line="503" bodyfile="/home/alexshires/EOS/eos-next/eos/utils/proposal_functions.hh" bodystart="501" bodyend="523"/>
    <listofallmembers>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ad5a7764646a0c216344d96be9f01655b" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_compute_cholesky_and_inverse</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1ac797f04a7bce3b029cfc32af0d6ecd07" prot="protected" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_compute_norm</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a33c4b4ed443dc77bb376636636f11b88" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_copy</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ad563d0d650e7cbd130c0229440c172fe" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_covariance</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a4ed7faa7ef374c0b6fbc065a45ce34d3" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_covariance_chol</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a91646502fcd9f17890b08ff8928e36f3" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_covariance_inverse</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ab5e327644edef3b9c8658e2cdd3d2772" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_dimension</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a4b45f19e0d4da4ed2c519d8a1d504fd2" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_dump_covariance</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a6626ace5861eeba7b92ea9ed4c6095ee" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_index_list</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a642356a5bf54154da5730ffca4ee0c7f" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_tmp_left</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a6a8e41ac55083ca3eebbfc65dce32b5e" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_tmp_right</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a37d4d1ebe9b21fb87da6976d7b08f962" prot="protected" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>_tmp_sample_covariance_current</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a03a15f539c8b7eeefb7e323d8c3cd15d" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>adapt</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a67c47eeeefc2f0027cab513f50a402a2" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>adaptations</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1abc989d0f246afe160eb1d4a0f1b4a03e" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>clone</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1aabab67ba765f532effe6dd8236d69cdd" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>cooling_power</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a54a59c24424caeb5e826d61d63edd95d" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ab52678a7403bae09d3db8f2247c02e17" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance_scale</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ab974d2da4b3dfcb7278418a25b07dd51" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance_scale_max</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1afd2de46a2288413f8e06c1f197b71ec2" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance_scale_min</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a69c7f79624af473004a147598d9afaa1" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance_scale_update_factor</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a4b7778284ee0ba2ea1ff85df8844da6e" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>covariance_type</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ae7eae33da3e528eea02bd653e83f865a" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>CovarianceType</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1aa7a6807a556a5187c77080d6b2036deb" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>dimension</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a5ab69304a64a9a947c847b8bc842417f" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>dump_state</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a691b0b536abdd28e3cc629c27046603d" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>evaluate</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a0f3a2171c1b20ef0f4cb4588185981aa" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>Multivariate</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a9052192755db179db5e204c2bb0ad3f3" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>MultivariateGaussian</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a6ca72be11badd000f8d36a80c131b5d4" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>norm</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a4f451b8dc78b681eee4bda462217fb77" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>propose</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a5f1d1b34460d12e1446dc5ff0fa714ee" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>rescale</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a830b00fd34f3b65922eeef04d76269e9" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>reset</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1aca175ee100311315c4ddb34757b68a3e" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>scalars_type</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a434c13230be16d8d1f658f277a5b6c28" prot="public" virt="non-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>ScalarsType</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1ac143e4c3d64075a86a6aa837d187d134" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>set_indices</name></member>
      <member refid="classeos_1_1proposal__functions_1_1Multivariate_1a2b216d8b68102068c721f758d562485d" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>~Multivariate</name></member>
      <member refid="classeos_1_1proposal__functions_1_1MultivariateGaussian_1a18dde9d78f6ec8a459443396648ee990" prot="public" virt="virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>~MultivariateGaussian</name></member>
      <member refid="structeos_1_1MarkovChain_1_1ProposalFunction_1a758ad6e18e36b15062fe776ee7a9b3d9" prot="public" virt="pure-virtual"><scope>eos::proposal_functions::MultivariateGaussian</scope><name>~ProposalFunction</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
